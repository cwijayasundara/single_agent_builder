# Writer Agent Configuration
# Specialized agent for content creation, writing, and documentation
agent:
  name: "Writer Agent"
  description: "AI agent specialized in content creation, writing, and document preparation"
  version: "1.0.0"

# LLM Configuration
llm:
  provider: "openai"
  model: "gpt-4.1-mini"
  temperature: 0.6
  max_tokens: 3000
  api_key_env: "OPENAI_API_KEY"

# Prompts Configuration
prompts:
  system_prompt:
    template: |
      You are a Writer Agent, specialized in creating high-quality written content across various formats and styles.
      
      Your expertise includes:
      - Writing articles, blog posts, and reports
      - Creating documentation and technical guides
      - Crafting engaging and informative content
      - Adapting writing style to target audience
      - Structuring content for clarity and flow
      - Editing and improving existing text
      - Creating summaries and abstracts
      - Formatting content appropriately
      
      Writing Principles:
      - Clarity and readability are paramount
      - Adapt tone and style to the intended audience
      - Use proper structure with headings, paragraphs, and formatting
      - Include relevant examples and supporting details
      - Maintain consistency in voice and terminology
      - Ensure logical flow and smooth transitions
      - Proofread for grammar, spelling, and punctuation
      
      Content Context: {query}
      Writing Memory: {memory_context}
      
      When creating content, always consider:
      1. Purpose and target audience
      2. Appropriate tone and style
      3. Clear structure and organization
      4. Supporting evidence and examples
      5. Proper formatting and presentation
    variables: ["query", "memory_context"]
    
  user_prompt:
    template: |
      Writing Request: {user_input}
      
      Please create content that includes:
      1. Well-structured and organized text
      2. Appropriate tone for the intended audience
      3. Clear headings and logical flow
      4. Supporting details and examples
      5. Proper formatting and presentation
      6. Final review for quality and accuracy
    variables: ["user_input"]
  
  tool_prompt:
    template: |
      Create written content for: {writing_topic}
      
      Focus on:
      - Clear and engaging writing
      - Proper structure and formatting
      - Audience-appropriate tone
      - Quality and accuracy
    variables: ["writing_topic"]

# Tools Configuration
tools:
  built_in:
    - "file_writer"
    - "file_reader"
  custom: []

# Memory Configuration
memory:
  enabled: true
  provider: "langmem"
  types:
    semantic: true    # Remember writing patterns and techniques
    episodic: true    # Remember writing sessions and projects
    procedural: true  # Remember successful writing approaches
  storage:
    backend: "memory"
  settings:
    max_memory_size: 7000
    retention_days: 45
    background_processing: true

# ReAct Configuration
react:
  max_iterations: 10
  recursion_limit: 50

# Optimization Configuration
optimization:
  enabled: true
  prompt_optimization:
    enabled: true
    feedback_collection: true
    ab_testing: true
    optimization_frequency: "weekly"
  performance_tracking:
    enabled: true
    metrics:
      - "response_time"
      - "content_quality"
      - "readability_score"
      - "user_satisfaction"
      - "writing_efficiency"

# Runtime Configuration
runtime:
  max_iterations: 10
  timeout_seconds: 150
  retry_attempts: 2
  debug_mode: false

# Evaluation Configuration
evaluation:
  enabled: true
  langsmith:
    enabled: false  # Set to true if LangSmith is available
    api_key_env: "LANGSMITH_API_KEY"
    project_name: "writer_agent"
    endpoint: "https://api.smith.langchain.com"
    tracing: false
  evaluators:
    - name: "writing_quality"
      type: "llm_as_judge"
      prompt: |
        Evaluate the quality of the written content.
        Consider:
        1. Clarity and readability
        2. Structure and organization
        3. Grammar and style
        4. Appropriateness for target audience
        5. Content completeness
        Score from 0.0 to 1.0 with detailed reasoning.
      model: "openai:gpt-4.1-mini"
      enabled: true
    - name: "response_time"
      type: "heuristic"
      parameters:
        target_time: 15.0
        max_time: 90.0
      enabled: true
  metrics: ["writing_quality", "response_time", "content_completeness"]
  auto_evaluate: false
  evaluation_frequency: "manual"
  batch_size: 3
  max_concurrency: 2

# Logging Configuration
logging:
  enabled: true
  level: "INFO"
  format: "structured"
  console:
    enabled: true
    level: "INFO"
    format: "readable"
  file:
    enabled: false  # Enable if file logging needed
    path: "logs/writer_agent.log"
    level: "DEBUG"
    max_size_mb: 100
    backup_count: 5
  components:
    agent: "INFO"
    tools: "DEBUG"
    memory: "INFO"
    optimization: "INFO"
  correlation:
    enabled: true
    include_in_response: false
  performance:
    log_execution_time: true
    log_token_usage: true
    log_memory_operations: false
  privacy:
    mask_api_keys: true
    mask_user_input: false
    excluded_fields: ["api_key", "auth_token"]

# Agent-specific configuration
specialization:
  role: "writer"
  capabilities:
    - "content_creation"
    - "article_writing"
    - "documentation"
    - "editing"
    - "formatting"
    - "summarization"
  
  writing_styles:
    - "informative"
    - "persuasive"
    - "technical"
    - "creative"
    - "academic"
    - "conversational"
  
  content_types:
    - "articles"
    - "blog_posts"
    - "reports"
    - "documentation"
    - "guides"
    - "summaries"
    - "emails"
    - "presentations"
  
  quality_standards:
    grammar_check: true
    readability_optimization: true
    structure_validation: true
    tone_consistency: true